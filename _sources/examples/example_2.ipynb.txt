{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cudatashader Example\n",
    "===================="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cuxfilter import charts\n",
    "import cuxfilter\n",
    "from bokeh import palettes\n",
    "from cuxfilter.layouts import layout_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load cuxfilter dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cux_df1 = cuxfilter.DataFrame.from_arrow('/home/ajay/data/nyc_taxi_1.arrow')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "chart1 = charts.cudatashader.scatter_geo(x='dropoff_x',\n",
    "                                         y='dropoff_y',\n",
    "                                         aggregate_fn='count',\n",
    "                                         x_range=(-8239910.23,-8229529.24),\n",
    "                                         y_range=(4968481.34,4983152.92))\n",
    "\n",
    "chart2 = charts.bokeh.bar('passenger_count', data_points=9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create dashboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d1 = cux_df1.dashboard([chart1, chart2], layout_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# d1.show('url you want the dashboard to run') remote dashboard:\n",
    "# d1.app('10.110.47.43:8888') If you are using jupyter remotely, use this line instead of second, and replace url with current notebook url\n",
    "#d1.app() for local interactive behavior\n",
    "\n",
    "#d1.preview() for just a view of the dashboard, interaciton not available. Recommended way to generate when uploading to git remote site\n",
    "await d1.preview()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Export the queried data into a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "queried_df = d1.export()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
